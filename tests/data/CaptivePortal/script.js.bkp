
// Controle do modal
const modalController = (function() {
    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modal-title');
    const modalMessage = document.getElementById('modal-message');
    
    return {
        open: (title, message) => {
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            modal.classList.add('active'); // Use 'active' em vez de 'hidden'
        },
        close: () => {
            modal.classList.remove('active');
        }
    };
})();

function showModal(title, message) {
    modalController.open(title, message);
}

// Menu responsivo
document.querySelector('.menu-toggle').addEventListener('click', function() {
    document.querySelector('nav ul').classList.toggle('active');
});

// Controle do formul√°rio WiFi
const ssidSelect = document.getElementById('ssid');
const passwordField = document.getElementById('password-field');
const connectBtn = document.getElementById('connect-btn');
const dhcpCheckbox = document.getElementById('dhcp-checkbox');
const saveWiFiCredentials = document.getElementById('save-wifi-credentials-btn');
const dhcpWrapper = document.getElementById('dhcp-wrapper');

// Ativa/desativa campos IP est√°tico
dhcpCheckbox.addEventListener('change', function() {
    const ipFields = document.querySelectorAll('#static-ip-form input[type="number"]');
    ipFields.forEach(field => {
        field.disabled = this.checked;
    });
});

// Mostra senha quando rede √© selecionada
ssidSelect.addEventListener('change', function() {
    if (this.value) {
        passwordField.classList.remove('hidden');
        connectBtn.classList.remove('hidden');
        dhcpWrapper.classList.remove('hidden');
    } else {
        passwordField.classList.add('hidden');
        connectBtn.classList.add('hidden');
        dhcpWrapper.classList.add('hidden');
    }
});

// Busca redes WiFi dispon√≠veis
window.addEventListener('DOMContentLoaded', function() {
    const ssidSelect = document.getElementById('ssid'); // Certifique-se que este ID existe no seu HTML
    const refreshButton = document.getElementById('refresh-wifi');

    function scanWifi() {
        // Limpa as op√ß√µes antigas
        ssidSelect.innerHTML = '<option value="">Selecione uma rede...</option>';

        fetch('/scan-wifi')
            .then(response => response.json())
            .then(networks => {
                networks.forEach(network => {
                    const option = document.createElement('option');
                    option.value = network.ssid;
                    
                    // √çcone e texto baseado no status da rede
                    const lockIcon = network.open ? 'üîì' : 'üîí';
                    const authStatus = network.open ? ' (Aberta)' : ' (Protegida)';
                    
                    option.textContent = `${lockIcon} ${network.ssid} ${authStatus} (${network.rssi}dBm)`;
                    
                    // Adiciona atributo data-open para uso posterior
                    option.dataset.open = network.open;
                    
                    // Opcional: estilo diferente para redes abertas
                    if (network.open) {
                        option.style.color = '#2ecc71'; // Verde para redes abertas
                    }
                    
                    ssidSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Erro ao buscar redes:', error);
                const option = document.createElement('option');
                option.textContent = '‚ùå Erro ao carregar redes';
                ssidSelect.appendChild(option);
            });
    }

    // Executa ao carregar a p√°gina
    scanWifi();

    refreshButton.addEventListener('click', scanWifi);
});


// Envio do formul√°rio WiFi
document.getElementById('credentials').addEventListener('submit', function(e) {
    e.preventDefault();
    saveWiFiCredentials.classList.add('hidden');

    // Obtenha os dados do formul√°rio
    const ssid = ssidSelect.value;
    const password = document.getElementById('password').value;
    const dhcp = dhcpCheckbox.checked;

    // Verifica se a senha est√° vazia para redes protegidas
    const selectedOption = ssidSelect.options[ssidSelect.selectedIndex];
    const isOpenNetwork = selectedOption?.dataset.open === 'true';

    // Verifica se a senha foi fornecida
    if (!isOpenNetwork && password.trim() === '') {
        showModal('Aviso', 'Digite a senha da rede Wi-Fi.');
        return;
    }

    // Exibe o modal
    modalController.open('Aguarde', `Conectando √† rede ${ssidSelect.value}...`);

    // Envia os dados para o servidor
    const formData = {
        ssid: ssid,
        password: password,
        dhcp: dhcp
    };
    
    fetch('/connect-wifi', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        showModal('Sucesso', data.message || 'Conectado com sucesso!');
        saveWiFiCredentials.classList.remove('hidden');
    })
    .catch(error => {
        showModal('Erro', 'Falha na conex√£o: ' + error.message);
    });
});

// Envio do comando para salvar as credenciais WiFi
document.getElementById('save-wifi-config-btn').addEventListener('click', function() {
    // Fun√ß√µes de valida√ß√£o
    function isValidOctet(value) {
        return value !== '' && !isNaN(value) && value >= 0 && value <= 255;
    }

    function isNotFirstOctetZero(octet) {
        return octet != 0;
    }

    function isNotLastOctetZeroOr255(octet) {
        return octet != 0 && octet != 255;
    }

    function isValidIP(ip1, ip2, ip3, ip4) {
        // Verifica octetos b√°sicos
        if (!isValidOctet(ip1) || !isValidOctet(ip2) || !isValidOctet(ip3) || !isValidOctet(ip4)) {
            return false;
        }
        
        // Primeiro octeto n√£o pode ser 0
        if (!isNotFirstOctetZero(ip1)) {
            return false;
        }
        
        // √öltimo octeto n√£o pode ser 0 ou 255
        if (!isNotLastOctetZeroOr255(ip4)) {
            return false;
        }
        
        // N√£o pode ser 127.0.0.1 (loopback)
        if (ip1 == 127 && ip2 == 0 && ip3 == 0 && ip4 == 1) {
            return false;
        }
        
        // N√£o pode ser 255.255.255.255 (broadcast limitado)
        if (ip1 == 255 && ip2 == 255 && ip3 == 255 && ip4 == 255) {
            return false;
        }
        
        return true;
    }

    function isValidSubnet(sn1, sn2, sn3, sn4) {
        // Verifica octetos b√°sicos
        if (!isValidOctet(sn1) || !isValidOctet(sn2) || !isValidOctet(sn3) || !isValidOctet(sn4)) {
            return false;
        }
        
        // Converte para n√∫mero inteiro
        const mask = (sn1 << 24) | (sn2 << 16) | (sn3 << 8) | sn4;
        
        // Verifica se √© uma m√°scara v√°lida (1s cont√≠guos seguidos de 0s)
        let foundZero = false;
        for (let i = 31; i >= 0; i--) {
            const bit = (mask >> i) & 1;
            if (bit === 0) foundZero = true;
            if (foundZero && bit === 1) return false;
        }
        
        // M√°scara n√£o pode ser 0.0.0.0
        if (mask === 0) return false;
        
        // M√°scara n√£o pode ser 255.255.255.255 (rede de host √∫nico)
        if (mask === 0xFFFFFFFF) return false;
        
        return true;
    }

    function areInSameNetwork(ip, gateway, subnet) {
        const ipParts = ip.split('.').map(Number);
        const gwParts = gateway.split('.').map(Number);
        const snParts = subnet.split('.').map(Number);
        
        for (let i = 0; i < 4; i++) {
            if ((ipParts[i] & snParts[i]) !== (gwParts[i] & snParts[i])) {
                return false;
            }
        }
        return true;
    }

    // Coletar valores
    const mDns = document.getElementById('mDns').value;
    const ip = [
        document.getElementById('ip1').value,
        document.getElementById('ip2').value,
        document.getElementById('ip3').value,
        document.getElementById('ip4').value
    ];
    
    const gw = [
        document.getElementById('gw1').value,
        document.getElementById('gw2').value,
        document.getElementById('gw3').value,
        document.getElementById('gw4').value
    ];
    
    const sn = [
        document.getElementById('sn1').value,
        document.getElementById('sn2').value,
        document.getElementById('sn3').value,
        document.getElementById('sn4').value
    ];

    // Validar todos os campos
    if (!mDns || !/^[a-zA-Z0-9]+$/.test(mDns)) {
        showModal('Erro', 'Nome de rede inv√°lido! Deve conter apenas letras e n√∫meros.');
        return;
    }

    if (!isValidIP(...ip)) {
        showModal('Erro', 'Endere√ßo IP inv√°lido!\n' +
                 '- Cada octeto deve estar entre 1-254\n' +
                 '- Primeiro octeto n√£o pode ser 0\n' +
                 '- √öltimo octeto n√£o pode ser 0 ou 255\n' +
                 '- N√£o pode ser 127.0.0.1 (loopback)');
        return;
    }

    if (!isValidIP(...gw)) {
        showModal('Erro', 'Gateway inv√°lido!\n' +
                 '- Cada octeto deve estar entre 1-254\n' +
                 '- Primeiro octeto n√£o pode ser 0\n' +
                 '- √öltimo octeto n√£o pode ser 0 ou 255');
        return;
    }

    if (!isValidSubnet(...sn)) {
        showModal('Erro', 'M√°scara de sub-rede inv√°lida!\n' +
                 '- Deve ter 1s cont√≠guos seguidos de 0s\n' +
                 '- N√£o pode ser 0.0.0.0 ou 255.255.255.255');
        return;
    }

    // Converter para strings
    const ipStr = ip.join('.');
    const gwStr = gw.join('.');
    const snStr = sn.join('.');

    // Verificar se IP e Gateway est√£o na mesma rede
    if (!areInSameNetwork(ipStr, gwStr, snStr)) {
        showModal('Erro', 'IP e Gateway n√£o est√£o na mesma rede de acordo com a m√°scara fornecida!');
        return;
    }

    // Mostrar mensagem de salvamento
    showModal('Salvando...', 'Aguarde enquanto salvamos as configura√ß√µes');
    
    // Preparar dados para envio
    const formData = {
        mDns: mDns,
        ip: ipStr,
        gateway: gwStr,
        subnet: snStr
    };
    
    // Enviar para o servidor
    fetch('/save-wifi-config', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        saveWiFiCredentials.classList.add('hidden');
        showModal('Sucesso', data.message || 'Configura√ß√£o salva com sucesso!');
    })
    .catch(error => {
        showModal('Erro', 'Falha ao salvar: ' + error.message);
    });
});

// Fun√ß√µes auxiliares// Fechar modal ao clicar no bot√£o ou fora
document.getElementById('modal-close').addEventListener('click', modalController.close);

// Configura√ß√£o √∫nica do listener para salvar credenciais
document.getElementById('save-wifi-credentials-btn').addEventListener('click', async function(e) {
    e.preventDefault();
    
    // Obtenha os dados do formul√°rio
    const ssid = ssidSelect.value;
    const password = document.getElementById('password').value;
    const dhcp = dhcpCheckbox.checked;
    const selectedOption = ssidSelect.options[ssidSelect.selectedIndex];
    const isOpenNetwork = selectedOption?.dataset.open === 'true';

    // Valida√ß√µes
    if (!ssid) {
        showModal('Erro', 'Selecione uma rede Wi-Fi');
        return;
    }

    if (!isOpenNetwork && !password) {
        showModal('Erro', 'Digite a senha da rede Wi-Fi');
        return;
    }

    showModal('Salvando', 'Salvando credenciais Wi-Fi...');

    try {
        // Dados para enviar
        const formData = {
            ssid: ssid,
            password: isOpenNetwork ? '' : password, // Envia vazio se rede aberta
            dhcp: dhcp
        };

        // Envio para o servidor
        const response = await fetch('/save-wifi-credentials', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error('Erro no servidor');
        }

        const data = await response.json();
        
        showModal('Sucesso', data.message || 'Credenciais salvas com sucesso!');
        
        // Fecha o modal ap√≥s 2 segundos
        setTimeout(() => {
            modalController.close();
            // Fecha a tela ou redireciona (dependendo da sua necessidade)
            //window.location.href = '/'; // ou outra p√°gina de sua escolha
        }, 2000);

    } catch (error) {
        showModal('Erro', 'Falha ao salvar: ' + error.message);
        console.error('Erro:', error);
    }
});

// document.getElementById('modal').addEventListener('click', function(e) {
//     if (e.target === this) modalController.close();
// });

ssidSelect.addEventListener('change', function() {
    const selectedOption = this.options[this.selectedIndex];
    const isOpen = selectedOption.dataset.open === 'true';
    
    if (isOpen) {
        // Esconde campo de senha para redes abertas
        document.getElementById('password-field').style.display = 'none';
    } else {
        // Mostra campo de senha para redes protegidas
        document.getElementById('password-field').style.display = 'block';
    }
});

document.addEventListener('DOMContentLoaded', function() {
    // Valida√ß√£o do Nome de Rede (sem caracteres especiais)
    const mDnsInput = document.getElementById('mDns');
    
    mDnsInput.addEventListener('input', function() {
        this.value = this.value.replace(/[^a-zA-Z0-9]/g, '');
    });

    mDnsInput.addEventListener('keypress', function(e) {
        const allowedChars = /[a-zA-Z0-9]/;
        if (!allowedChars.test(e.key)) {
            e.preventDefault();
        }
    });

   // Seleciona todos os campos de IP, Gateway e M√°scara
   const ipInputs = document.querySelectorAll('.ip-group input[type="number"]');
   console.log("Campos de IP encontrados:", ipInputs); // Debug

   ipInputs.forEach((input, currentIndex) => {  // Renomeamos para 'currentIndex' para evitar confus√£o
       // Remove "disabled" se quiser permitir edi√ß√£o (ou use "readonly")
       // input.disabled = false;
       // input.readOnly = true;

       // Valida√ß√£o 0-255
       input.addEventListener('change', function() {
           if (this.value > 255) this.value = 255;
           if (this.value < 0) this.value = 0;
       });

       // Pular para o pr√≥ximo campo ao digitar "."
       input.addEventListener('keydown', function(e) {
           if (e.key === '.' || e.key === 'Enter' || e.key === ',' || e.key === 'Period') {
               e.preventDefault();
               const nextIndex = currentIndex + 1;  // Usamos 'currentIndex' aqui
               if (nextIndex < ipInputs.length) {
                   ipInputs[nextIndex].focus();
                   ipInputs[nextIndex].value = ''; // Limpa o pr√≥ximo campo
                   console.log("Foco movido para o campo:", nextIndex); // Debug
               }
           }
       });
   });
});